*astrolsp.txt*         For Neovim >= 0.9.0         Last change: 2023 August 04

==============================================================================
Table of Contents                                 *astrolsp-table-of-contents*

1. astrolsp                                                |astrolsp-astrolsp|
2. Lua API                                                  |astrolsp-lua-api|
  - astrolsp                                       |astrolsp-lua-api-astrolsp|
  - astrolsp.toggles                       |astrolsp-lua-api-astrolsp.toggles|

==============================================================================
1. astrolsp                                                *astrolsp-astrolsp*

LSP tooling built for AstroNvim


==============================================================================
2. Lua API                                                  *astrolsp-lua-api*

astrolsp API documentation


ASTROLSP                                           *astrolsp-lua-api-astrolsp*

AstroNvim LSP Utilities

Various utility functions to use within AstroNvim for the LSP engine

This module can be loaded with `local astro = require "astrolsp"`

copyright 2023 license GNU General Public License v3.0


CONFIG ~

>lua
    AstroLSPOpts
<

The configuration as set by the user through the `setup()` function


DIAGNOSTICS ~

>lua
    table
<

A table of settings for different levels of diagnostics


FORMAT_OPTS ~

>lua
    unknown
<

Format options that are passed into the `vim.lsp.buf.format` (`:h
vim.lsp.buf.format()`)


LSP_OPTS ~

>lua
    function astrolsp.lsp_opts(server_name: string)
      -> table
<

Get the server configuration for a given language server to be provided to the
server’s `setup()` call

_param_ `server_name` — The name of the server

_return_ — The table of LSP options used when setting up the given language
server


LSP_PROGRESS ~

>lua
    table
<

A table of lsp progress messages that can be used to display LSP progress in a
statusline


LSP_SETUP ~

>lua
    function astrolsp.lsp_setup(server: string)
<

Helper function to set up a given server with the Neovim LSP client

_param_ `server` — The name of the server to be setup


ON_ATTACH ~

>lua
    function astrolsp.on_attach(client: table, bufnr: number)
<

_param_ `client` — The LSP client details when attaching

_param_ `bufnr` — The buffer that the LSP client is attaching to

The `on_attach` function used by AstroNvim


SETUP ~

>lua
    function astrolsp.setup(opts: AstroLSPOpts)
<

Setup and configure AstroLSP

_param_ `opts` — options passed by the user to configure AstroLSP


ASTROLSP.TOGGLES                           *astrolsp-lua-api-astrolsp.toggles*

AstroNvim LSP Toggles

Utility functions for easy LSP toggles

This module can be loaded with `local ui = require("astrolsp.toggles")`

copyright 2023 license GNU General Public License v3.0


AUTOFORMAT ~

>lua
    function astrolsp.toggles.autoformat(silent?: boolean)
<

Toggle auto format

_param_ `silent` — if true then don’t sent a notification


BUFFER_AUTOFORMAT ~

>lua
    function astrolsp.toggles.buffer_autoformat(bufnr?: number, silent?: boolean)
<

Toggle buffer local auto format

_param_ `bufnr` — The buffer to toggle the autoformatting of, default the
current buffer

_param_ `silent` — if true then don’t sent a notification


BUFFER_INLAY_HINTS ~

>lua
    function astrolsp.toggles.buffer_inlay_hints(bufnr?: number, silent?: boolean)
<

Toggle buffer LSP inlay hints

_param_ `bufnr` — the buffer to toggle the clients on

_param_ `silent` — if true then don’t sent a notification


BUFFER_SEMANTIC_TOKENS ~

>lua
    function astrolsp.toggles.buffer_semantic_tokens(bufnr?: number, silent?: boolean)
<

Toggle buffer semantic token highlighting for all language servers that support
it

_param_ `bufnr` — the buffer to toggle the clients on

_param_ `silent` — if true then don’t sent a notification


CODELENS ~

>lua
    function astrolsp.toggles.codelens(silent?: boolean)
<

Toggle codelens

_param_ `silent` — if true then don’t sent a notification


DIAGNOSTICS ~

>lua
    function astrolsp.toggles.diagnostics(silent?: boolean)
<

Toggle diagnostics

_param_ `silent` — if true then don’t sent a notification

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
