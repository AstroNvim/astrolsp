*astrolsp.txt*        For Neovim >= 0.9.0        Last change: 2025 February 17

==============================================================================
Table of Contents                                 *astrolsp-table-of-contents*

1. AstroLSP                                                |astrolsp-astrolsp|
  - Features                                      |astrolsp-astrolsp-features|
  - Requirements                              |astrolsp-astrolsp-requirements|
  - Installation                              |astrolsp-astrolsp-installation|
  - Configuration                            |astrolsp-astrolsp-configuration|
  - Integrations                              |astrolsp-astrolsp-integrations|
  - API                                                |astrolsp-astrolsp-api|
  - Contributing                              |astrolsp-astrolsp-contributing|
2. Lua API                                                  |astrolsp-lua-api|
  - astrolsp                                       |astrolsp-lua-api-astrolsp|
  - astrolsp.file_operations       |astrolsp-lua-api-astrolsp.file_operations|
  - astrolsp.toggles                       |astrolsp-lua-api-astrolsp.toggles|

==============================================================================
1. AstroLSP                                                *astrolsp-astrolsp*

AstroLSP provides a simple API for configuring and setting up language servers
in Neovim. This is the LSP configuration engine that AstroNvim
<https://github.com/AstroNvim/AstroNvim> uses, but can be used by itself as
well.


FEATURES                                          *astrolsp-astrolsp-features*

- Unified interface for configuring language servers:
    - Key mappings when attaching
    - Capabilities and language server settings
- Format on save
- Easily toggle features such as inlay hints, codelens, and semantic tokens


REQUIREMENTS                                  *astrolsp-astrolsp-requirements*

- Neovim >= 0.9


INSTALLATION                                  *astrolsp-astrolsp-installation*

Install the plugin with your plugin manager of choice:

**lazy.nvim** <https://github.com/folke/lazy.nvim>

>lua
    {
      "AstroNvim/astrolsp",
      opts = {
        -- set configuration options  as described below
      }
    }
<

**packer.nvim** <https://github.com/wbthomason/packer.nvim>

>lua
    use {
      "AstroNvim/astrolsp",
    }
    
    require("astrolsp").setup {
      -- set configuration options  as described below
    }
<


CONFIGURATION                                *astrolsp-astrolsp-configuration*

**AstroLSP** comes with the no defaults, but can be configured fully through
the `opts` table in lazy or through calling `require("astrolsp").setup({})`.
Here are descriptions of the options and some example usages:

>lua
    ---@type AstroLSPConfig
    local opts = {
      -- Configuration table of features provided by AstroLSP
      features = {
        codelens = true, -- enable/disable codelens refresh on start
        inlay_hints = false, -- enable/disable inlay hints on start
        semantic_tokens = true, -- enable/disable semantic token highlighting
      },
      -- Configure buffer local auto commands to add when attaching a language server
      autocmds = {
        -- first key is the `augroup` (:h augroup)
        lsp_document_highlight = {
          -- condition to create/delete auto command group
          -- can either be a string of a client capability or a function of `fun(client, bufnr): boolean`
          -- condition will be resolved for each client on each execution and if it ever fails for all clients,
          -- the auto commands will be deleted for that buffer
          cond = "textDocument/documentHighlight",
          -- list of auto commands to set
          {
            -- events to trigger
            event = { "CursorHold", "CursorHoldI" },
            -- the rest of the autocmd options (:h nvim_create_autocmd)
            desc = "Document Highlighting",
            callback = function() vim.lsp.buf.document_highlight() end,
          },
          {
            event = { "CursorMoved", "CursorMovedI", "BufLeave" },
            desc = "Document Highlighting Clear",
            callback = function() vim.lsp.buf.clear_references() end,
          },
        },
      },
      -- Configure buffer local user commands to add when attaching a language server
      commands = {
        Format = {
          function() vim.lsp.buf.format() end,
          -- condition to create the user command
          -- can either be a string of a client capability or a function of `fun(client, bufnr): boolean`
          cond = "textDocument/formatting",
          -- the rest of the user command options (:h nvim_create_user_command)
          desc = "Format file with LSP",
        },
      },
      -- Configure default capabilities for language servers (`:h vim.lsp.protocol.make_client.capabilities()`)
      capabilities = {
        textDocument = {
          foldingRange = { dynamicRegistration = false },
        },
      },
      -- Configure language servers for `lspconfig` (`:h lspconfig-setup`)
      config = {
        lua_ls = {
          settings = {
            Lua = {
              hint = { enable = true, arrayIndex = "Disable" },
            },
          },
        },
        clangd = {
          capabilities = {
            offsetEncoding = "utf-8",
          },
        },
      },
      -- Configuration of LSP file operation functionality
      file_operations = {
        -- the timeout when executing LSP client operations
        timeout = 10000,
        -- fully disable/enable file operation methods
        operations = {
          willRename = true,
          didRename = true,
          willCreate = true,
          didCreate = true,
          willDelete = true,
          didDelete = true,
        },
      },
      -- A custom flags table to be passed to all language servers  (`:h lspconfig-setup`)
      flags = {
        exit_timeout = 5000,
      },
      -- Configuration options for controlling formatting with language servers
      formatting = {
        -- control auto formatting on save
        format_on_save = {
          -- enable or disable format on save globally
          enabled = true,
          -- enable format on save for specified filetypes only
          allow_filetypes = {
            "go",
          },
          -- disable format on save for specified filetypes
          ignore_filetypes = {
            "python",
          },
        },
        -- disable formatting capabilities for specific language servers
        disabled = {
          "lua_ls",
        },
        -- default format timeout
        timeout_ms = 1000,
        -- fully override the default formatting function
        filter = function(client) return true end,
      },
      -- Configure how language servers get set up
      handlers = {
        -- default handler, first entry with no key
        function(server, opts) require("lspconfig")[server].setup(opts) end,
        -- custom function handler for pyright
        pyright = function(_, opts) require("lspconfig").pyright.setup(opts) end,
        -- set to false to disable the setup of a language server
        rust_analyzer = false,
      },
      -- Configure `vim.lsp.handlers`
      lsp_handlers = {
        ["textDocument/hover"] = vim.lsp.with(vim.lsp.handlers.hover, { border = "rounded", silent = true }),
        ["textDocument/signatureHelp"] = false, -- set to false to disable any custom handlers
      },
      -- Configuration of mappings added when attaching a language server during the core `on_attach` function
      -- The first key into the table is the vim map mode (`:h map-modes`), and the value is a table of entries to be passed to `vim.keymap.set` (`:h vim.keymap.set`):
      --   - The key is the first parameter or the vim mode (only a single mode supported) and the value is a table of keymaps within that mode:
      --     - The first element with no key in the table is the action (the 2nd parameter) and the rest of the keys/value pairs are options for the third parameter.
      --       There is also a special `cond` key which can either be a string of a language server capability or a function with `client` and `bufnr` parameters that returns a boolean of whether or not the mapping is added.
      mappings = {
        -- map mode (:h map-modes)
        n = {
          -- a binding with no condition and therefore is always added
          gl = {
            function() vim.diagnostic.open_float() end,
            desc = "Hover diagnostics",
          },
          -- condition for only server with declaration capabilities
          gD = {
            function() vim.lsp.buf.declaration() end,
            desc = "Declaration of current symbol",
            cond = "textDocument/declaration",
          },
          -- condition with a full function with `client` and `bufnr`
          ["<leader>uY"] = {
            function() require("astrolsp.toggles").buffer_semantic_tokens() end,
            desc = "Toggle LSP semantic highlight (buffer)",
            cond = function(client, bufnr)
              return client.server_capabilities.semanticTokensProvider and vim.lsp.semantic_tokens
            end,
          },
        },
      },
      -- A list like table of servers that should be setup, useful for enabling language servers not installed with Mason.
      servers = { "dartls" },
      -- A custom `on_attach` function to be run after the default `on_attach` function, takes two parameters `client` and `bufnr`  (`:h lspconfig-setup`)
      on_attach = function(client, bufnr) client.server_capabilities.semanticTokensProvider = nil end,
    }
<


INTEGRATIONS                                  *astrolsp-astrolsp-integrations*

**AstroLSP** can be used as the basis for configuring plugins such as
`nvim-lspconfig` <https://github.com/neovim/nvim-lspconfig> and
`mason-lspconfig` <https://github.com/williamboman/mason-lspconfig.nvim>. Here
are a few examples (using `lazy.nvim` <https://github.com/folke/lazy.nvim>
plugin manager):


NVIM-LSPCONFIG ~

>lua
    {
      "neovim/nvim-lspconfig",
      dependencies = {
        { "AstroNvim/astrolsp", opts = {} },
      },
      config = function()
        -- set up servers configured with AstroLSP
        vim.tbl_map(require("astrolsp").lsp_setup, require("astrolsp").config.servers)
      end,
    }
<


NVIM-LSPCONFIG + MASON.NVIM + MASON-LSPCONFIG.NVIM ~

>lua
    {
      "neovim/nvim-lspconfig",
      dependencies = {
        { "AstroNvim/astrolsp", opts = {} },
        {
          "williamboman/mason-lspconfig.nvim", -- MUST be set up before `nvim-lspconfig`
          dependencies = { "williamboman/mason.nvim" },
          opts = function()
            return {
              -- use AstroLSP setup for mason-lspconfig
              handlers = { function(server) require("astrolsp").lsp_setup(server) end },
            }
          end,
        },
      },
      config = function()
        -- set up servers configured with AstroLSP
        vim.tbl_map(require("astrolsp").lsp_setup, require("astrolsp").config.servers)
      end,
    }
<


NONE-LS.NVIM ~

>lua
    {
      "nvimtools/none-ls.nvim",
      dependencies = {
        { "AstroNvim/astrolsp", opts = {} },
      },
      opts = function() return { on_attach = require("astrolsp").on_attach } end,
    }
<


API                                                    *astrolsp-astrolsp-api*

**AstroLSP** provides a Lua API with utility functions. This can be viewed with
|astrolsp| or in the repository at doc/api.md <doc/api.md>


CONTRIBUTING                                  *astrolsp-astrolsp-contributing*

If you plan to contribute, please check the contribution guidelines
<https://github.com/AstroNvim/.github/blob/main/CONTRIBUTING.md> first.


==============================================================================
2. Lua API                                                  *astrolsp-lua-api*

astrolsp API documentation


ASTROLSP                                           *astrolsp-lua-api-astrolsp*


ATTACHED_CLIENTS ~

>lua
    table
<

A table of LSP clients that have been attached with AstroLSP


CONFIG ~

>lua
    AstroLSPOpts
<

The configuration as set by the user through the `setup()` function


FORMAT_OPTS ~

>lua
    unknown
<

Format options that are passed into the `vim.lsp.buf.format`
(|vim.lsp.buf.format()|)


LSP_OPTS ~

>lua
    function astrolsp.lsp_opts(server_name: string)
      -> table
<

Get the server configuration for a given language server to be provided to the
server’s `setup()` call

_param_ `server_name` — The name of the server

_return_ — The table of LSP options used when setting up the given language
server


LSP_PROGRESS ~

>lua
    table
<

A table of lsp progress messages that can be used to display LSP progress in a
statusline


LSP_SETUP ~

>lua
    function astrolsp.lsp_setup(server: string)
<

Helper function to set up a given server with the Neovim LSP client

_param_ `server` — The name of the server to be setup


ON_ATTACH ~

>lua
    function astrolsp.on_attach(client: vim.lsp.Client, bufnr: integer)
<

The `on_attach` function used by AstroNvim

_param_ `client` — The LSP client details when attaching

_param_ `bufnr` — The buffer that the LSP client is attaching to


PROGRESS ~

>lua
    function astrolsp.progress(data: { client_id: integer, params: lsp.ProgressParams })
<

Add a new LSP progress message to the message queue


SETUP ~

>lua
    function astrolsp.setup(opts: AstroLSPOpts)
<

Setup and configure AstroLSP

_param_ `opts` — options passed by the user to configure AstroLSP


ASTROLSP.FILE_OPERATIONS           *astrolsp-lua-api-astrolsp.file_operations*


DIDCREATEFILES ~

>lua
    function astrolsp.file_operations.didCreateFiles(fnames: string|string[])
<

Notify LSP clients that file(s) were created

_param_ `fnames` — a file or list of files that were created


DIDDELETEFILES ~

>lua
    function astrolsp.file_operations.didDeleteFiles(fnames: string|string[])
<

Notify LSP clients that file(s) were deleted

_param_ `fnames` — a file or list of files that were deleted


DIDRENAMEFILES ~

>lua
    function astrolsp.file_operations.didRenameFiles(renames: AstroLSPFileOperationsRename|AstroLSPFileOperationsRename[])
<

Notify LSP clients that file(s) were renamed

_param_ `renames` — a table or list of tables of files that were renamed


WILLCREATEFILES ~

>lua
    function astrolsp.file_operations.willCreateFiles(fnames: string|string[])
<

Notify LSP clients that file(s) are going to be created

_param_ `fnames` — a file or list of files that will be created


WILLDELETEFILES ~

>lua
    function astrolsp.file_operations.willDeleteFiles(fnames: string|string[])
<

Notify LSP clients that file(s) are going to be deleted

_param_ `fnames` — a file or list of files that will be deleted


WILLRENAMEFILES ~

>lua
    function astrolsp.file_operations.willRenameFiles(renames: AstroLSPFileOperationsRename|AstroLSPFileOperationsRename[])
<

Notify LSP clients that file(s) are going to be renamed

_param_ `renames` — a table or list of tables of files that will be renamed


ASTROLSP.TOGGLES                           *astrolsp-lua-api-astrolsp.toggles*


AUTOFORMAT ~

>lua
    function astrolsp.toggles.autoformat(silent?: boolean)
<

Toggle auto format

_param_ `silent` — if true then don’t sent a notification


BUFFER_AUTOFORMAT ~

>lua
    function astrolsp.toggles.buffer_autoformat(bufnr?: integer, silent?: boolean)
<

Toggle buffer local auto format

_param_ `bufnr` — The buffer to toggle the autoformatting of, default the
current buffer

_param_ `silent` — if true then don’t sent a notification


BUFFER_INLAY_HINTS ~

>lua
    function astrolsp.toggles.buffer_inlay_hints(bufnr?: integer, silent?: boolean)
<

Toggle buffer LSP inlay hints

_param_ `bufnr` — the buffer to toggle the clients on

_param_ `silent` — if true then don’t sent a notification


BUFFER_SEMANTIC_TOKENS ~

>lua
    function astrolsp.toggles.buffer_semantic_tokens(bufnr?: integer, silent?: boolean)
<

Toggle buffer semantic token highlighting for all language servers that support
it

_param_ `bufnr` — the buffer to toggle the clients on

_param_ `silent` — if true then don’t sent a notification


BUFFER_SIGNATURE_HELP ~

>lua
    function astrolsp.toggles.buffer_signature_help(bufnr?: integer, silent?: boolean)
<

Toggle buffer local automatic signature help

_param_ `bufnr` — The buffer to toggle the auto signature help of, default
the current buffer

_param_ `silent` — if true then don’t sent a notification


CODELENS ~

>lua
    function astrolsp.toggles.codelens(silent?: boolean)
<

Toggle codelens

_param_ `silent` — if true then don’t sent a notification


INLAY_HINTS ~

>lua
    function astrolsp.toggles.inlay_hints(silent?: boolean)
<

Toggle global LSP inlay hints

_param_ `silent` — if true then don’t sent a notification


SIGNATURE_HELP ~

>lua
    function astrolsp.toggles.signature_help(silent?: boolean)
<

Toggle automatic signature help

_param_ `silent` — if true then don’t sent a notification

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
